name: Build REAPER Plugin

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.13
      with:
        cmake-version: '3.25.0'
    
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
    
    - name: Build
      run: cmake --build build --config Release
    
    - name: Upload Windows Plugin
      uses: actions/upload-artifact@v4
      with:
        name: reaper_enz_ReaperTools-win64
        path: build/Release/reaper_enz_ReaperTools.dll

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.13
      with:
        cmake-version: '3.25.0'
    
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
    
    - name: Build
      run: cmake --build build --config Release
    
    - name: Upload macOS Plugin
      uses: actions/upload-artifact@v4
      with:
        name: reaper_enz_ReaperTools-macos
        path: build/reaper_enz_ReaperTools.dylib

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Download Windows Plugin
      uses: actions/download-artifact@v4
      with:
        name: reaper_enz_ReaperTools-win64
        path: dist/
    
    - name: Download macOS Plugin
      uses: actions/download-artifact@v4
      with:
        name: reaper_enz_ReaperTools-macos
        path: dist/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/reaper_enz_ReaperTools.dll
          dist/reaper_enz_ReaperTools.dylib
        generate_release_notes: true
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update ReaPack Index
      run: python .github/scripts/update_reapack_index.py

  push-to-publish-repo:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: 获取版本号
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: 下载 Windows DLL
        uses: actions/download-artifact@v4
        with:
          name: reaper_enz_ReaperTools-win64
          path: .

      # 如有 macOS 产物可在此处添加下载步骤
      # - name: 下载 macOS dylib
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: reaper_enz_ReaperTools-macos
      #     path: .

      - name: 克隆发布库
        uses: actions/checkout@v4
        with:
          repository: signorzhao/reapack_repo
          token: ${{ secrets.PUBLISH_TOKEN }}
          path: publish_repo

      - name: 复制 DLL 到发布库
        run: |
          mkdir -p publish_repo/releases/${{ steps.get_version.outputs.version }}
          cp reaper_enz_ReaperTools.dll publish_repo/releases/${{ steps.get_version.outputs.version }}/

      # 如有 macOS dylib 可在此处复制
      # cp reaper_enz_ReaperTools.dylib publish_repo/releases/${{ steps.get_version.outputs.version }}/

      - name: 提交并推送到发布库
        run: |
          cd publish_repo
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git commit -m "Auto publish ${{ steps.get_version.outputs.version }}" || echo "No changes to commit"
          git push 